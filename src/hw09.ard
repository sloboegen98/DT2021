\import Algebra.Meta
\import Data.List
\import Logic.Meta
\import Meta
\import Order.LinearOrder
\import Paths (*>, pmap2)
\import Paths.Meta
\import Utils (Maybe, absurd, just, maybe, nothing)
\import hw05
\import hw07
\import lect05 (funExt, sym)
\import lect07 (Decide, no, yes)
\import lect09
\open LinearOrder

-- 1. Закончите определение \instance Monad для Term.

\instance TermMonad : Monad Term
  | return => var
  | >>= {A B : \Set} (t : Term A) (k : A -> Term B) : Term B \elim t {
    | var v => k v
    | unit => unit
    | app t1 t2 => app (t1 >>= k) (t2 >>= k)
    | lam t => lam (t >>= liftM k)
  }
  | return-left _ _ => idp
  | return-right t => >>=-var t
  | >>=-assoc t k l => >>=-assoc-lemma t k l

  \where {
    \func >>=-var {A : \Set} (t : Term A) : t >>= var = t \elim t
      | var v => idp
      | unit => idp
      | app t1 t2 => pmap2 app (>>=-var t1) (>>=-var t2)
      | lam t => rewrite liftM-lemma (pmap lam (>>=-var t))

    \func liftM-lemma {A : \Set} : liftM {A} var = var =>
      funExt _ (unfold liftM
          (\lam t => \case t \as t', idp : t = t' \with {
            | nothing, p => rewrite p idp
            | just a, p => rewrite p idp
          }))

    \func >>=-assoc-lemma {A B C : \Set} (t : Term A) (k : A -> Term B) (l : B -> Term C)
      : t >>= k >>= l = t >>= (\lam (x : A) => k x >>= l) \elim t
      | var v => idp
      | unit => idp
      | app t1 t2 => pmap2 app (>>=-assoc-lemma t1 k l) (>>=-assoc-lemma t2 k l)
      | lam t => pmap lam {?}
  }

-- 2. Определите отношение многошаговой редукции на Term.

\func Red {V : \Set} (t s : Term V) : \Type => ReflTransClosure Red1 t s

-- 3. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--    Определите любую стратегию редукции.

-- Нормальная стратегия

\func strategy {V : \Set} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) \elim t
  -- копипаст из-за того, что не понимаю как написать что-то такое:
  -- \case t1 \with
  -- lam l, p => ...
  -- t, p => и вот тут хочется, чтоб была информация, что t либо var, либо app, либо unit
  | app t1 t2 => \case t1 \as t, idp : t1 = t \with {
    | lam l, p => yes (l >>= maybe t2 var, redBeta p idp)
    | var _, p => \case strategy t1 \with {
      | yes at1 => yes (app at1.1 t2, redAppLeft at1.2 idp)
      | no nt1 => \case strategy t2 \with {
        | yes at2 => yes (app t1 at2.1, redAppRight idp at2.2)
        | no nt2 => no (\case \elim __ \with {
          | (s, r) => cases (s, r) \with {
            | s1, redBeta p p1 => contradiction
            | app s1 _, redAppLeft r1 _ => nt1 (s1, r1)
            | app _ s2, redAppRight _ r2 => nt2 (s2, r2)
          }
        })
      }
    }
    | unit, p => \case strategy t1 \with {
      | yes at1 => yes (app at1.1 t2, redAppLeft at1.2 idp)
      | no nt1 => \case strategy t2 \with {
        | yes at2 => yes (app t1 at2.1, redAppRight idp at2.2)
        | no nt2 => no (\case \elim __ \with {
          | (s, r) => cases (s, r) \with {
            | s1, redBeta p p1 => contradiction
            | app s1 _, redAppLeft r1 _ => nt1 (s1, r1)
            | app _ s2, redAppRight _ r2 => nt2 (s2, r2)
          }
        })
      }
    }
    | app _ _, p => \case strategy t1 \with {
      | yes at1 => yes (app at1.1 t2, redAppLeft at1.2 idp)
      | no nt1 => \case strategy t2 \with {
        | yes at2 => yes (app t1 at2.1, redAppRight idp at2.2)
        | no nt2 => no (\case \elim __ \with {
          | (s, r) => cases (s, r) \with {
            | s1, redBeta p p1 => contradiction
            | app s1 _, redAppLeft r1 _ => nt1 (s1, r1)
            | app _ s2, redAppRight _ r2 => nt2 (s2, r2)
          }
        })
      }
    }
  }
  | var v => no (\case __.2)
  | unit => no (\case __.2)
  | lam l => \case (strategy l) \with {
    | yes al => yes (lam al.1, redLam al.2)
    | no n => no (\case __ \with {
      | (s, r) => cases (s, r) \with {
        | lam s1, redLam r1 => n (s1, r1)
      }
    })
  }

-- 4. Докажите, что подтермы достижимого терма достижимы.

\func appAccLeft {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t \elim a
  | acc f => acc (\lam t' r => appAccLeft (f (app t' s) (redAppLeft r idp)))

\func appAccRight {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 s \elim a
  | acc f => acc (\lam s' r => appAccRight (f (app t s') (redAppRight idp r)))

\func subLamAcc {V : \Set} {t : Term (Maybe V)} (a : Acc Red1 (lam t)) : Acc Red1 t \elim a
  | acc f => acc (\lam t' r => subLamAcc (f (lam t') (redLam r)))

-- 5. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func substLem {U V : \Set} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B \elim b, B, h
  | var v, B, varType p => rewrite (sym p) (h' v)
  | unit, Unit, unitType => unitType
  | app t1 t2, B, appType h1 h2 => appType (substLem ctx t1 _ h1 ctx' a h') (substLem ctx t2 _ h2 ctx' a h')
  | lam b, Arr A S, lamType h => lamType (substLem (maybe A ctx) b _ h (maybe A ctx') (liftM a)
      (\lam mu => \case \elim mu \with {
        | nothing => varType idp
        | just u => \let hu => h' u \in
        \case a u \as au, ctx u \as cu, idp : a u = au, idp : ctx u = cu \with {
          | var v, Unit, p, q => {?}
          | var v, Arr t t1, p, q => {?}
          | unit, Unit, p, q => unfold liftM (rewrite (p, q) unitType)
          | unit, Arr t t1, p, q => unfold liftM (rewrite (p, q) {?})
          | app au1 au2, Unit, p, q => {?}
          | app au1 au2, Arr t t1, p, q => {?}
          | lam au, Unit, p, q => {?}
          | lam au, Arr t t1, p, q => {?}
        }
--          cases (a u, ctx u, hu) \with {
--            | var v, x, varType p => {?}
--            | unit, Unit, unitType => unfold liftM {?}
--            | app x x1, x2, appType hu1 hu2 => {?}
--            | lam x, Arr x1 x2, lamType hu1 => {?}
--          }
      }))

\func substLem1 => {?}

-- 6. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func substLem-lemma {V : \Set} {A B : Type} (ctx : V -> Type)
                     (f : Term (Maybe V)) (fType : hasType (maybe A ctx) f B)
                     (a : Term V) (aType : hasType ctx a A)
  : hasType ctx (f >>= maybe a var) B =>
  substLem (maybe A ctx) f B fType ctx (maybe a var)
      (\lam u => \case \elim  u \with {
        | nothing => aType
        | just x => varType idp
      })

\func red1Lem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red1 a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A \elim a, a', r, A, h
  | app foo x, a', redBeta {f} p fx=a', A, appType h1 h2 =>
    \let f-type => rewrite p h1 \in
      \case \elim f-type \with {
        | lamType f-type => rewrite (sym fx=a') (substLem-lemma ctx f f-type x h2)
      }
  | app a1 a2, app a1' a2', redAppLeft r p, A, appType h1 h2 => rewrite (sym p) (appType (red1Lem r h1) h2)
  | app a a1, app a' a'1, redAppRight p r, A, appType h1 h2 => rewrite (sym p) (appType h1 (red1Lem r h2))
  | lam a, lam a', redLam r, Arr A A1, lamType h => lamType (red1Lem r h)

\func redLem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A \elim a, r, A, h
  | var v, RClos-refl var=a', A, varType p => rewrite (sym var=a') (varType p)
  | unit, RClos-refl unit=a', Unit, unitType => rewrite (sym unit=a') unitType
  | app a a1, RClos-refl app=a', A, appType h1 h2 => rewrite (sym app=a') (appType h1 h2)
  | lam a, RClos-refl lam=a', Arr A A1, lamType h => rewrite (sym lam=a') (lamType h)
  | var v, RClos-trans z var-z red-za', A, varType p => \case var-z
  | unit, RClos-trans z unit-z red-za', Unit, unitType => \case unit-z
  | app f x, RClos-trans z app-z red-za', A, appType h1 h2 => redLem red-za' (red1Lem app-z (appType h1 h2))
  | lam a, RClos-trans z lam-z red-za', Arr A S, lamType h => redLem red-za' (red1Lem lam-z (lamType h))

-- Optional
-- 7. Докажите typeableInterp из лекции