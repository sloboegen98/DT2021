\import Utils
\import lect04 \hiding (Vec, vnil, vcons)
\open Nat (+, *)

-- 1. Напишите функцию lookup, которая принимает List A и натуральное число и возвращает элемент по заданому индексу.
--    В общем случае эту функцию определить невозможно, т.к. индекс может быть больше, чем число элементов в списке.
--    Поэтому эта функция должна дополнительно еще принимать доказательство того, что индекс находится в допустимых границах, в виде T (n < length xs).

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

\func lookup {A : \Type} (xs : List A) (n : Nat) (n-lt-len : T (n < length xs)) : A \elim xs, n, n-lt-len
  | nil, 0, ()
  | :: a xs, 0, n-lt-len => a
  | :: a xs, suc n, n-lt-len => lookup xs n n-lt-len

\func test-lookup : lookup (10 :: 2 :: 3 :: 4 :: 2 :: nil) 1 () = 2 => idp

-- 2. Реализуйте аналоги функции replicate для vec и Vec (эта функция создает список заданной длины, состоящий из повторений данного элемента).

\func replicate-vec {A : \Type} (n : Nat) (a : A) : vec A n \elim n
  | 0 => ()
  | suc n => (a, replicate-vec n a)

\func replicate-Vec {A : \Type} (n : Nat) (a : A) : Vec A n \elim n
  | 0 => vnil
  | suc n => vcons a (replicate-Vec n a)

-- 3. Реализуйте аналоги функции map для vec и Vec.

\func map-vec {A B : \Type} (f : A -> B) {n : Nat} (xs : vec A n) : vec B n \elim n, xs
  | 0, _ => ()
  | suc n, xs => (f (head n xs), map-vec f (tail n xs))

\func map-Vec {A B : \Type} (f : A -> B) {n : Nat} (xs : Vec A n) : Vec B n \elim n, xs
  | 0, vnil => vnil
  | suc n, vcons x xs => vcons (f x) (map-Vec f xs)

\func mp {A : \Type} (a : A) => (a, a)
\func map-vec-test : map-vec (mp {Nat}) {2} (1, (2, ())) = ((1, 1), ((2, 2), ())) => idp
\func map-Vec-test : map-Vec mp (vcons 43 vnil) = vcons (43, 43) vnil => idp

-- 4. Реализуйте аналоги функции zipWith для vec и Vec.
--    Функция должна принимать вектора одинаковой длины.

\func zipWith-vec {A B C : \Type} (f : A -> B -> C) {n : Nat} (xs : vec A n) (ys : vec B n) : vec C n \elim n, xs, ys
  | 0, xs, ys => ()
  | suc n, xs, ys => (f (head n xs) (head n ys), zipWith-vec f (tail n xs) (tail n ys))

\func zipWith-Vec {A B C : \Type} (f : A -> B -> C) {n : Nat} (xs : Vec A n) (ys : Vec B n) : Vec C n \elim n, xs, ys
  | 0, vnil, vnil => vnil
  | suc n, vcons x xs, vcons y ys => vcons (f x y) (zipWith-Vec f xs ys)

\func zipWith-test : zipWith-vec (+) {2} (1, (3, ())) (2, (4, ())) = (3, (7, ())) => idp

-- 5. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  transport (\lam x => f a b = f x b') p
      (transport (\lam x => f a b = f a x) q idp)

-- 6. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (id \Type) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => repl (pmap B p) b

-- 7. Определите тип CTree A n полных бинарных деревьев высоты ровно n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data CTree (A : \Type) (n : Nat) \elim n
  | 0 => ctleaf
  | suc n => ctbranch (CTree A n) A (CTree A n)

-- 8. Определите тип Tree A n бинарных деревьев высоты не больше n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data Tree (A : \Type) (n : Nat) \elim n
  | 0 => tleaf
  | suc n => { tempty | tbranch (Tree A n) A (Tree A n) }

-- определите функцию, возвращающую высоту дерева.

\func height {A : \Type} (n : Nat) (t : Tree A n) : Fin (suc n) \elim n, t
  | 0, tleaf => fzero
  | suc n, tempty => fzero
  | suc n, tbranch t1 a t2 => fsuc (fmax n (height n t1) (height n t2))
  \where {
    \func fmax (n : Nat) (f1 f2 : Fin (suc n)) : Fin (suc n) => if (toNat f1 < toNat f2) f2 f1
  }

\func height-test : height 2 (tbranch tempty 0 (tbranch tleaf 1 tleaf)) = (fsuc (fsuc fzero)) => idp

-- Optional task
-- 9. Функции Fin n -> A соответствуют спискам элементов A длины n.
--     Функция, преобразующая Vec A n в Fin n -> A, была реализована на лекции.
--     Реализуйте обратную функцию.

\func coin {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n \elim n
  | 0 => vnil
  | suc n => vcons (f (nat-to-fin n)) (coin (\lam x => f (fsuc x)))
  \where {
    \func nat-to-fin (n : Nat) : Fin (suc n) \elim  n
      | 0 => fzero
      | suc n => fsuc (nat-to-fin n)
  }

-- Optional task
-- 10. Определите тип матриц и ряд функций над ними.

\func Mat (A : \Type) (n m : Nat) : \Type => {?}

-- диагональная матрица с элементами e на диагонали и z на остальных позициях.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n => {?}

-- транспонирование матриц

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n => {?}

-- сложение матриц

\func matAdd {A : \Type} (add : A -> A -> A) (n m : Nat) (M N : Mat A n m) : Mat A n m => {?}

-- умножение матриц

-- z ─ нейтральный элемент по сложению.

\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) (n m k : Nat) (M : Mat A n m) (N : Mat A m k) : Mat A n k =>
  {?}

-- 11. Укажите явно чему равен уровень в каждом из вызовов id' ниже.
--     Напишите явно чему равны типы всех функций idTest*.

\func id' {A : \Type 1} (a : A) => a

\func idTest1 : \Pi (A : \Type0) -> A -> A => id' (id' id)
--                                            ^^^  ^^^
--                                             1    1, так как id и (id' id) упоминают только \Type0

\func idTest2 : \Pi (A : \Type0) -> \Type0 => id' Maybe
--                                            ^^^
--                                             1, так как Maybe упоминает только \Type0
