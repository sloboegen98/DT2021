\import Equiv
\import Logic (inP, truncP)
\import Logic.Meta
\import Meta
\import Paths (inv)
\import Paths.Meta
\import lect01 ($)
\import lect05 (funExt)
\import lect10 (setLem)
\import lect11
\import Utils \hiding (transport, Or, inl, inr)

-- 1. Докажите, что если A : \Prop, то Trunc A эквивалентен A.

\func trunc-prop {A : \Prop} : Trunc A <-> A =>
  (\case __ \with {
  trunc a => a
  }, trunc)

-- 2. Докажите следующий закон де Моргана.

\func deMorgan (A B C : \Prop) : (\Sigma A (B `Or` C)) <-> ((\Sigma A B) `Or` (\Sigma A C)) =>
  (deMorgan-> A B C, deMorgan<- A B C)
  \where {
    \func deMorgan-> (A B C : \Prop) : (\Sigma A (B `Or` C)) -> ((\Sigma A B) `Or` (\Sigma A C)) =>
      \lam x => \case x.2 \with {
        | inl b => inl (x.1, b)
        | inr c => inr (x.1, c)
      }

    \func deMorgan<- (A B C : \Prop) : ((\Sigma A B) `Or` (\Sigma A C)) -> (\Sigma A (B `Or` C)) =>
      \case __ \with {
        | inl ab => (ab.1, inl ab.2)
        | inr ac => (ac.1, inr ac.2)
      }
  }

-- 3. Определите элиминатор для Or через Or-rec, не используя паттерн матчинг на Or.

--\func Or-rec {A B C : \Prop} (f : A -> C) (g : B -> C) (p : A `Or` B) : C \elim p
--  | inl a => f a
--  | inr b => g b

\func Or-elim {A B : \Prop} (C : Or A B -> \Prop)
              (f : \Pi (x : A) -> C (inl x)) (g : \Pi (y : B) -> C (inr y))
              (p : A `Or` B) : C p =>
  \let lm => {?}
--    Or-rec {A} {B} {\Sigma (ab : A `Or` B) (C ab)}
--      (\lam a => (inl a, f a))
--      (\lam b => (inr b, g b))
--      p \in rewrite (Path.inProp p lm.1) lm.2

-- 4. Докажите, что тип утверждений является множеством.

\func prop-isSet : isSet \Prop => \lam _ _ => Path.inProp

-- 5. Докажите, что функции Prop1-to-Prop2 и Prop2-to-Prop1 взаимно обратны и, как следствие, что Prop1 = Prop2.

\func P1P2-P2P1-inv : \Pi (P : \Prop) -> Prop2-to-Prop1 (Prop1-to-Prop2 P) = P =>
  \lam P => unfold Prop1-to-Prop2 (unfold Prop2-to-Prop1 {?})

--\func P2P1-P1P2-inv : \Pi (P : \Prop) -> Prop1-to-Prop2 (Prop2-to-Prop1 P) = P => {?}

-- Можно сделать только одно из упражнений 6a,6b на выбор.
-- 6a. Тип С называется когенератором, если для любых множеств A и B и любых функция f,g : A -> B верно, что если h `o` f = h `o` g для всех h : B -> C, то f = g.
--     Докажите, что \Prop является когенератором.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func isCogenerator (C : \Type) => \Pi {A B : \Set} (f g : A -> B) (p : \Pi (h : B -> C) -> h `o` f = h `o` g) -> f = g

\func PropIsCogenerator : isCogenerator \Prop => {?}

-- 6b. Тип X называется инъективным, если для любой функции f : A -> X и любой инъекции i : A -> B сущесвует функция l : B -> X такая, что l `o` i = f.
--     Докажите, что \Prop инъективен.

\func isInj {A B : \Type} (f : A -> B) => \Pi (x y : A) -> f x = f y -> x = y

\func isInjective (X : \Type) =>
  \Pi {A B : \Type} (f : A -> X) (i : A -> B) (p : isInj i) -> \Sigma (l : B -> X) (l `o` i = f)


-- Можно сделать только одно из упражнений 7a,7b на выбор.
-- 7a. Докажите, что (Bool = Bool) = Bool.

--\func BoolAut : (Bool = Bool) = Bool =>
--  path (iso
--      (\lam p => {?})
--      (\lam x => {?})
--      {?}
--      {?})

\func BoolAut : (Bool = Bool) = Bool =>
  equivalence=>equality
      (\new Equiv {
        | f => \lam t => equality=>equivalence _ _ t true
        | ret => \case __ \with {
          | true => {?}
          | false => {?}
        }
        | ret_f => \lam x => {?}
        | sec => {?}
        | f_sec => {?}
      })

-- 7b. Докажите, что (n+m)-элементное множество равно размеченному объединению n- и m-элементных множеств.
